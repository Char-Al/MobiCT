#!/usr/bin/env python
# coding: utf-8

# In[77]:


import pandas as pd
import numpy as np
import csv
import matplotlib.pyplot as plt
import scipy.stats
import warnings
warnings.filterwarnings('ignore')

# Put the name of input tsv file
tsvfile = pd.read_csv("/path_to_tsv_file/.tsv", delimiter='\t', header=1)#, comment=None, encoding='utf-8')
tsvfile
ll=[]
for line in range(0,tsvfile.shape[0]):
    csqColumn = tsvfile["CSQ"][i].split(",") # split on "CSQ" column  
    liste=[]
    for n in csqColumn:
        if "ENST" in n and "ENSP" in n and "YES" in n: # on CSQ column, filter out all line doesn't contains these parameters:ENST, ENSP, YES 
            m=n.split('|')
            liste.append(m)
    tsvfile["CSQ"][line] = liste

def extractAnnotation(data,thr):   
    
    # Filters that can be used to reduce the number of false positive variant (but becareful of loosing true variants too)
    def filtre (data):
        dataf=data[data['CSQ'].apply(len).gt(0)] # every line contain a 'CSQ' column empty will be discarded
        dataf=dataf.drop(dataf[dataf["AF"]<thr].index)
        #dataf=dataf.drop(dataf[dataf["BIAS"]!="2:2"].index) #remove all variant who hasn's a equilibre bias
        #dataf=dataf.drop(dataf[dataf["VD"]<3].index)
        #dataf=dataf.drop(dataf[dataf["DP"]<1000].index)
        #dataf=dataf.drop(dataf[dataf["QUAL"]<40].index)
        return dataf

    data1 = filtre(data)
    
    # create a panda file contain information needed from csq column of the raw tsv file
    def create_csq(data1):
        df1= pd.DataFrame(columns=["Uploaded_variation","Location","Symbol","Gene","CDS_position","HGVSc","Protein_position","HGVSp","Amino_acids","Codons","canonical","af"])
        for n in data1["CSQ"]:
            df1=df1.append({"Uploaded_variation":n[0][0],"Location":n[0][1],"Symbol":n[0][2],"Gene":n[0][3],"CDS_position":n[0][4], "HGVSc":n[0][5], "Protein_position":n[0][6], "HGVSp":n[0][7],"Amino_acids":n[0][8],"Codons":n[0][9], "canonical":n[0][10], "af":n[0][11]},ignore_index=True)
        return df1
    
    df1 = create_csq(data1)
    df1["af"] = df1["af"].replace('', np.nan) # replace all columns with an empty "af" value with "nan"

    # Convert the "af" column to float
    df1["af"] = df1["af"].astype(float)

    # Remove rows with "af" > 0.01 and the row above it    
    df1=df1.drop(df1[df1["af"]>0.01].index)
    df1 = df1.reset_index(drop=True)
    
    # remove the ENST and ENSP code from variant and let only c. mutation or p. 
    def listTab(df1):
        comp1=df1[["Location","Gene","HGVSc","HGVSp","af"]]
        for k in range(comp1.shape[0]):
            comp1["HGVSc"][k]=comp1["HGVSc"][k].split(":")[1]
    
            comp1["HGVSp"][k]=comp1["HGVSp"][k].split(":")[1]
        listTable=comp1.values.tolist() # transfomr the panda format into list formt
        return listTable
    
    listTable=listTab(df1)  
    return [df1,listTable,data1]


threshold = 0.01

linesTsvRaw=extractAnnotation(tsvfile,threshold)[2] # dataframe of tsv raw file  after filter function.
list_var=extractAnnotation(tsvfile,threshold)[1] # list of variants after all filtering step containing these information: "Location","Gene","HGVSc","HGVSp","af"

resultRaw = 'variants.xlsx'# the name of xls file contaning variants
data_list = []

for l in list_var: # iterating through variant list generated by extractAnnotation function
    for vaf,csq in zip(linesTsvRaw["AF"],linesTsvRaw["CSQ"]): # iterating through dataframe linesTsvRaw
        csqPos=csq[0][1].split(":")[1] # extract the position of gene
        gene=csq[0][3] # gene name
        nuc=csq[0][5] # HGVSc information
        prot=csq[0][7] # HGVSp information
        if csqPos in l[0] and l[2] in nuc:
            data_list.append([gene, nuc, prot, vaf]) # append "Gene", "HGVSc", "HGVSp" and  "VAF" information of each varaint to data_list
            print([gene,nuc,prot,vaf])

# Create a Pandas DataFrame from the data list
df = pd.DataFrame(data_list, columns=["Gene", "HGVSc", "HGVSp", "VAF"])

# Create an Excel writer
excel_writer = pd.ExcelWriter(resultRaw, engine="openpyxl")

# Write the DataFrame to the Excel sheet
df.to_excel(excel_writer, index=False, sheet_name="Data")
excel_writer.save()

